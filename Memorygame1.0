int[][] grid = {{1, 1, 2, 2}, {3, 3, 4, 4}, {5, 5, 6, 6}};
int rows = grid.length;
int cols = grid[0].length;
boolean gameover = false;
boolean gamelock = false;
boolean[][] revealed = new boolean[grid.length][grid[0].length];
boolean first_click = false;

int row1, col1, row2, col2;
int revealTime = 60; 
int revealCounter = 0; 
int point = 0;

void setup() {
  size(500, 500);
  int[] simNum = {1,1,2,2,3,3,4,4,5,5,6,6};
  shuffleArray(simNum);
  int index = 0;
  for (int i = 0; i < grid.length; i++) {
    for (int j = 0; j < grid[i].length; j++) {
      grid[i][j] = simNum[index];
      index++;
    }
  }
}

void draw() {
  if (!gameover) {
    strokeWeight(2);
    background(255);
    table(cols, rows);

    for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
        if (revealed[i][j]) {
          revealLine(i, j);
        }
      }
    }

    if (gamelock && revealCounter > 0) {
      revealCounter--;
      if (revealCounter == 0) {
        revealed[row1][col1] = false;
        revealed[row2][col2] = false;
        gamelock = false;
      }
    }
  }
}

void mousePressed() {
  int clickedCol = mouseX / (width / cols);
  int clickedRow = mouseY / (height / rows);

  if (clickedCol < cols && clickedRow < rows && !gamelock) {
    if (!first_click) {
      first_click = true;
      row1 = clickedRow;
      col1 = clickedCol;
      revealed[row1][col1] = true; 
    } else {

      row2 = clickedRow;
      col2 = clickedCol;
      if (row1 != row2 || col1 != col2) {
        revealed[row2][col2] = true; 
        gamelock = true;
        match_check(row1, col1, row2, col2);
      }
    }
  }
}

void match_check(int row1, int col1, int row2, int col2) {
  if (grid[row1][col1] == grid[row2][col2]) {
    println("Matched!");
    first_click = false;
    gamelock = false;
    point++;
    if(point >= 6){gameover = true;}
  } else {
    println("Not Matched");
    revealCounter = revealTime; 
    first_click = false;
  }
}

void table(int colum, int row) {
  for (int i = 1; i <= colum; i++) {
    line(width / colum * i, 0, width / colum * i, height);
  }
  for (int j = 1; j <= row; j++) {
    line(0, height / row * j, width, height / row * j);
  }
}

void draw_lines(int x, int y, int n) {
  for (int i = 0; i < n; i++) {
    line(x + i * 20, y, x + i * 20, y + 40); 
  }
}

void revealLine(int row, int col) {
  int w = width / cols;
  int h = height / rows;
  int x = col * w + 20;  
  int y = row * h + 10;
  draw_lines(x, y, grid[row][col]);
}

void shuffleArray(int[] array) {
  for (int i = array.length - 1; i > 0; i--) {
    int index = int(random(i + 1)); 
    int temp = array[i];
    array[i] = array[index];
    array[index] = temp;
  }
}
